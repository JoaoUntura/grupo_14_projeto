-- Criação do banco de dados
CREATE DATABASE IF NOT EXISTS loja;
USE loja;

-- Tabela: Cliente
CREATE TABLE Cliente (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    contato VARCHAR(100),
    email VARCHAR(100),
    cpf VARCHAR(100)
);

-- Tabela: Pagamento (precisa existir antes de Pedido por causa da FK)
CREATE TABLE Pagamento (
    id INT AUTO_INCREMENT PRIMARY KEY,
    externalId CHAR(36) UNIQUE NOT NULL, -- UUID é armazenado como string
    data_criacao DATE NOT NULL,
    data_pagamento DATE,
    metodo VARCHAR(50),
    status VARCHAR(50),
    totalCentavos INT
);

-- Tabela: Pedido
CREATE TABLE Pedido (
    id INT AUTO_INCREMENT PRIMARY KEY,
    externalId CHAR(36) UNIQUE NOT NULL,
    data DATE NOT NULL,
    cliente_id INT NOT NULL,
    pagamento_id INT NOT NULL,
    entrega BOOLEAN,
    FOREIGN KEY (cliente_id) REFERENCES Cliente(id),
    FOREIGN KEY (pagamento_id) REFERENCES Pagamento(id)
);

-- Tabela: Produto
CREATE TABLE Produto (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    preco DECIMAL(10,2) NOT NULL
);

-- Tabela: pedido_produto (associação N:N)
CREATE TABLE pedido_produto (
    id INT AUTO_INCREMENT PRIMARY KEY,
    pedido_id INT NOT NULL,
    produto_id INT NOT NULL,
    quantidade INT NOT NULL,
    FOREIGN KEY (pedido_id) REFERENCES Pedido(id),
    FOREIGN KEY (produto_id) REFERENCES Produto(id)
);

-- Tabela: Role
CREATE TABLE Role (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(50) NOT NULL
);

-- Tabela: User
CREATE TABLE User (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hashed VARCHAR(255) NOT NULL,
    role_id INT,
    nome VARCHAR(100),
    FOREIGN KEY (role_id) REFERENCES Role(id)
);
